# .github/workflows/build-v1.0-release.yml
# Имя рабочего процесса (отображается в GitHub Actions)
name: Build Cross-Platform Release (v1.0 ONLY)

# Триггер: запускать при публикации нового релиза
on:
  release:
    types: [published] # Запускается только когда релиз опубликован (не черновик)

# Разрешения, необходимые для загрузки артефактов в релиз
permissions:
  contents: write

# Задачи (jobs), которые будут выполняться
jobs:
  # ----------------------- Задача для сборки под Windows (v1.0) -----------------------
  build-windows-v1_0:
    name: Build for Windows (v1.0)
    runs-on: windows-latest
    # ЗАПУСКАТЬ ТОЛЬКО ЕСЛИ ТЕГ РЕЛИЗА 'v1.0'
    if: github.event.release.tag_name == 'v1.0'

    # Устанавливаем рабочую директорию для v1.0
    defaults:
      run:
        working-directory: ./old versions/v1.0

    steps:
      - name: Check out code (v1.0)
        uses: actions/checkout@v4 # Скачает код версии v1.0

      - name: Set up Python (v1.0)
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' # Или та версия, что была нужна для v1.0

      - name: Install dependencies (v1.0)
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          # Устанавливаем зависимости из requirements.txt в папке v1.0
          pip install -r requirements.txt

      - name: Build with PyInstaller (v1.0)
        # Используем правильное имя скрипта из папки v1.0
        # Команда выполняется в ./old versions/v1.0
        run: pyinstaller --onefile --windowed ru_geo_society_lib_parser_v1_0.py

      - name: Upload Release Asset (Windows, v1.0)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          # Путь к файлу относительно корня репозитория
          asset_path: ./old versions/v1.0/dist/ru_geo_society_lib_parser_v1_0.exe
          # Имя файла в релизе
          asset_name: RGO_Parser_v1.0_win64.exe
          asset_content_type: application/vnd.microsoft.portable-executable

  # ----------------------- Задача для сборки под macOS (v1.0) -----------------------
  build-macos-v1_0:
    name: Build for macOS (v1.0)
    runs-on: macos-latest
    # ЗАПУСКАТЬ ТОЛЬКО ЕСЛИ ТЕГ РЕЛИЗА 'v1.0'
    if: github.event.release.tag_name == 'v1.0'

    # Устанавливаем рабочую директорию для v1.0
    defaults:
      run:
        working-directory: ./old versions/v1.0

    steps:
      - name: Check out code (v1.0)
        uses: actions/checkout@v4

      - name: Set up Python (v1.0)
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies (v1.0)
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build with PyInstaller (v1.0)
        # Используем правильное имя скрипта. --windowed создаст .app
        run: pyinstaller --windowed ru_geo_society_lib_parser_v1_0.py

      - name: Create Zip Archive of .app (v1.0)
        # Архивируем .app, созданный в ./old versions/v1.0/dist/
        run: zip -r ./dist/RGO_Parser_v1.0_macOS.zip ./dist/ru_geo_society_lib_parser_v1_0.app

      - name: Upload Release Asset (macOS, v1.0)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          # Путь к архиву относительно корня репозитория
          asset_path: ./old versions/v1.0/dist/RGO_Parser_v1.0_macOS.zip
          # Имя файла в релизе
          asset_name: RGO_Parser_v1.0_macOS.zip
          asset_content_type: application/zip

  # ----------------------- Задача для сборки под Linux (Ubuntu, v1.0) -----------------------
  build-linux-v1_0:
    name: Build for Linux (Ubuntu, v1.0)
    runs-on: ubuntu-latest
    # ЗАПУСКАТЬ ТОЛЬКО ЕСЛИ ТЕГ РЕЛИЗА 'v1.0'
    if: github.event.release.tag_name == 'v1.0'

    # Устанавливаем рабочую директорию для v1.0, кроме шага с apt-get
    defaults:
      run:
        working-directory: ./old versions/v1.0

    steps:
      - name: Check out code (v1.0)
        uses: actions/checkout@v4

      - name: Set up Python (v1.0)
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Tkinter (Linux, v1.0) # Оставляем, если у v1.0 был GUI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk
        working-directory: . # Выполняем в корне

      - name: Install dependencies (v1.0)
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build with PyInstaller (v1.0)
        # Используем правильное имя скрипта. --noconsole для GUI без терминала
        run: pyinstaller --onefile --noconsole ru_geo_society_lib_parser_v1_0.py

      - name: Upload Release Asset (Linux, v1.0)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          # Путь к файлу относительно корня репозитория
          asset_path: ./old versions/v1.0/dist/ru_geo_society_lib_parser_v1_0
          # Имя файла в релизе
          asset_name: RGO_Parser_v1.0_ubuntu
          asset_content_type: application/octet-stream